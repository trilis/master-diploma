@book{lambda_calculus,
  author       = {Hendrik Pieter Barendregt},
  title        = {The lambda calculus - its syntax and semantics},
  series       = {Studies in logic and the foundations of mathematics},
  volume       = {103},
  publisher    = {North-Holland},
  year         = {1985},
  isbn         = {978-0-444-86748-3},
  timestamp    = {Fri, 28 Jun 2019 12:45:52 +0200},
  biburl       = {https://dblp.org/rec/books/daglib/0067558.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@manual{coq,
  title =        {The Coq Proof Assistant},
  author =       {{The Coq Development Team}},
  note =         {Version 8.16},
  year =         {2022},
  url =          "https://doi.org/10.5281/zenodo.7313584"
}

@article{4colors,
  author = {Gonthier, G.},
  year = {2008},
  month = {01},
  pages = {1382-1393},
  title = {Formal proof - The four-color theorem},
  volume = {55},
  journal = {Notices of the AMS}
}

@article{compcert,
author = {Leroy, Xavier},
year = {2009},
month = {07},
pages = {},
title = {Formal Verification of a Realistic Compiler},
volume = {52},
journal = {Communications of the ACM},
doi = {10.1145/1538788.1538814}
}

@inproceedings{ironfleet,
  author = {Hawblitzel, Chris and Howell, Jon and Kapritsos, Manos and Lorch, Jacob R. and Parno, Bryan and Roberts, Michael L. and Setty, Srinath and Zill, Brian},
  title = {IronFleet: proving practical distributed systems correct},
  year = {2015},
  isbn = {9781450338349},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/2815400.2815428},
  doi = {10.1145/2815400.2815428},
  abstract = {Distributed systems are notorious for harboring subtle bugs. Verification can, in principle, eliminate these bugs a priori, but verification has historically been difficult to apply at full-program scale, much less distributed-system scale.We describe a methodology for building practical and provably correct distributed systems based on a unique blend of TLA-style state-machine refinement and Hoare-logic verification. We demonstrate the methodology on a complex implementation of a Paxos-based replicated state machine library and a lease-based sharded key-value store. We prove that each obeys a concise safety specification, as well as desirable liveness requirements. Each implementation achieves performance competitive with a reference system. With our methodology and lessons learned, we aim to raise the standard for distributed systems from "tested" to "correct."},
  booktitle = {Proceedings of the 25th Symposium on Operating Systems Principles},
  pages = {1–17},
  numpages = {17},
  location = {Monterey, California},
  series = {SOSP '15}
}

@article{smart_contracts,
  title = {Verification of smart contracts: A survey},
  journal = {Pervasive and Mobile Computing},
  volume = {67},
  pages = {101227},
  year = {2020},
  issn = {1574-1192},
  doi = {https://doi.org/10.1016/j.pmcj.2020.101227},
  url = {https://www.sciencedirect.com/science/article/pii/S1574119220300821},
  author = {Mouhamad Almakhour and Layth Sliman and Abed Ellatif Samhat and Abdelhamid Mellouk},
  keywords = {Smart contracts, Blockchain, Verification, Correctness, Security assurance},
  abstract = {To achieve trust and continuity in the smart contracts-based business process execution, the verification of such smart contracts is mandatory. A blockchain-based smart contract should work as intended before using it. Due to the immutable nature of blockchain, any bugs or errors will become permanent once published and could lead to huge economic losses. To avoid such problems, verification is required to check the correctness and the security of the smart contract. In this survey, we consider the smart contracts and we investigate smart contacts formal verification methods. We also investigate the security assurance for smart contracts using vulnerabilities detection methods. In this context, we provide a detailed overview of the different approaches to verify the smart contracts and we present the used methods and tools. We show a description of each method as well as its advantages and limitations and we draw several conclusions.}
}

@online{ursus,
  author = {Pruvendo},
  title = {Ursus language documentation},
  year = 2025,
  url = {https://ursus-lang.dev/},
  urldate = {2025-04-04}
}

@inproceedings{coqslow,
  title={10 Years of Superlinear Slowness in Coq},
  author={Gross, Jason and Erbsen, Andres},
  booktitle={Coq Workshop},
  year={2022}
}

@phdthesis{gross_phd,
  title        = {Performance Engineering of Proof-Based Software Systems at Scale},
  author       = {Gross, Jason},
  year         = 2021,
  school       = {Massachusetts Institute of Technology},
  type         = {PhD thesis}
}

@InProceedings{cic_proofs,
  author="Coquand, Thierry
  and Huet, G{\'e}rard",
  editor="Buchberger, Bruno",
  title="Constructions: A higher order proof system for mechanizing mathematics",
  booktitle="EUROCAL '85",
  year="1985",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="151--184",
  abstract="We present an extensive set of mathematical propositions and proofs in order to demonstrate the power of expression of the theory of constructions.",
  isbn="978-3-540-39684-0"
}

@online{sharing_bug,
  author = {François Pottier},
  title = {Qed time is quadratic (sharing of sub-terms is not detected) - Issue \#18520},
  year = 2024,
  url = {https://github.com/rocq-prover/rocq/issues/18520},
  urldate = {2025-04-04}
}

@online{letform_bug,
  author = {Jean-Christophe Léchenet},
  title = {Nested let-in cause high memory consumption - Issue \#10206},
  year = 2019,
  url = {https://github.com/rocq-prover/rocq/issues/10206},
  urldate = {2025-04-04}
}

@online{opaque,
  author = {Jonathan Leivent},
  title = {vm\_compute and native\_compute defy Opaque - Issue \#4476},
  year = 2016,
  url = {https://github.com/rocq-prover/rocq/issues/4476},
  urldate = {2025-04-04}
}

@article{haskell,
  author = {Peyton Jones, Simon},
  year = {1992},
  month = {04},
  pages = {127-202},
  title = {Implementing Lazy Functional Languages on Stock Hardware: The Spineless Tagless G-Machine.},
  volume = {2},
  journal = {J. Funct. Program.},
  doi = {10.1017/S0956796800000319}
}

@article{loops_are_hard,
  author = {Furia, Carlo A. and Meyer, Bertrand and Velder, Sergey},
  title = {Loop invariants: Analysis, classification, and examples},
  year = {2014},
  issue_date = {January 2014},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {46},
  number = {3},
  issn = {0360-0300},
  url = {https://doi.org/10.1145/2506375},
  doi = {10.1145/2506375},
  journal = {ACM Comput. Surv.},
  articleno = {34},
  numpages = {51}
}

@article{wallets_survey,
  title={Security Aspects of Cryptocurrency Wallets—A Systematic Literature Review},
  author={Sabine Houy and Philipp Schmid and Alexandre Bartel},
  journal={ACM Computing Surveys},
  year={2023},
  volume={56},
  pages={1 - 31},
  url={https://api.semanticscholar.org/CorpusID:258718193}
}

@online{multisig,
  author = {{TON Labs}},
  title = {Safe Multisig Wallet},
  year = 2025,
  url = {https://github.com/everx-labs/ton-labs-contracts/blob/master/solidity/safemultisig/SafeMultisigWallet.sol},
  urldate = {2025-04-04}
}

@InProceedings{native,
  author="Boespflug, Mathieu
  and D{\'e}n{\`e}s, Maxime
  and Gr{\'e}goire, Benjamin",
  editor="Jouannaud, Jean-Pierre
  and Shao, Zhong",
  title="Full Reduction at Full Throttle",
  booktitle="Certified Programs and Proofs",
  year="2011",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="362--377",
  abstract="Emerging trends in proof styles and new applications of interactive proof assistants exploit the computational facilities of the provided proof language, reaping enormous benefits in proof size and convenience to the user. However, the resulting proof objects really put the proof assistant to the test in terms of computational time required to check them. We present a novel translation of the terms of the full Calculus of (Co)Inductive Constructions to OCaml programs. Building on this translation, we further present a new fully featured version of Coq that offloads much of the computation required during proof checking to a vanilla, state of the art and fine tuned compiler. This modular scheme yields substantial performance improvements over existing systems at a reduced implementation cost.",
  isbn="978-3-642-25379-9"
}

@inproceedings{vm,
  author = {Gr\'{e}goire, Benjamin and Leroy, Xavier},
  title = {A compiled implementation of strong reduction},
  year = {2002},
  isbn = {1581134878},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/581478.581501},
  doi = {10.1145/581478.581501},
  abstract = {Motivated by applications to proof assistants based on dependent types, we develop and prove correct a strong reducer and \ss{}-equivalence checker for the λ-calculus with products, sums, and guarded fixpoints. Our approach is based on compilation to the bytecode of an abstract machine performing weak reductions on non-closed terms, derived with minimal modifications from the ZAM machine used in the Objective Caml bytecode interpreter, and complemented by a recursive "read back" procedure. An implementation in the Coq proof assistant demonstrates important speed-ups compared with the original interpreter-based implementation of strong reduction in Coq.},
  booktitle = {Proceedings of the Seventh ACM SIGPLAN International Conference on Functional Programming},
  pages = {235–246},
  numpages = {12},
  keywords = {Coq, abstract machine, beta-equivalence, calculus of constructions, normalization by evaluation, strong reduction, virtual machine},
  location = {Pittsburgh, PA, USA},
  series = {ICFP '02}
}

@book{slpj,
author = {Peyton Jones, Simon L.},
title = {The Implementation of Functional Programming Languages (Prentice-Hall International Series in Computer Science)},
year = {1987},
isbn = {013453333X},
publisher = {Prentice-Hall, Inc.},
address = {USA}
}

@inbook{lambdacube,
author = {Barendregt, Henk (Hendrik)},
year = {1992},
month = {01},
pages = {117-309},
title = {Lambda Calculi with Types},
volume = {2},
isbn = {0198537611}
}